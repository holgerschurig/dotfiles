#!/usr/bin/python3

import sys, os, json, subprocess

ListType = type([])


def run(cmd):
	with open(os.devnull, 'w') as devnull:
		process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=devnull)
	out = process.communicate()[0].decode()
	process.stdout.close()
	return out

def dump_one(t):
	for k in sorted(t.keys()):
		v = t[k]
		if type(v) is ListType:
			v = "[ %d entries ]" % len(v)
		print("%-20s %s" % (k, v))

def dump_names(tree, indent=0):
	print(" " * indent, tree['name'], tree['id'], tree['focused'])
	for t in tree['nodes']:
		dump_names(t, indent+4)
	for t in tree['floating_nodes']:
		dump_names(t, indent+4)

def focus(focused, tofocus):
	# print("FOCUSED: %x %s" % (focused['window'], focused['name']))
	out = run(['/usr/bin/i3-msg', '[id=%d] mark _last' % focused['window']])
	# print("MARK:", out)

	print("TOFOCUS: %x %s" % (tofocus['window'], tofocus['name']))
	out = run(['/usr/bin/i3-msg', '[id=%d] focus'      % tofocus['window']])
	# print("FOCUS:", out)




# Get list of all managed entities from i3
tree = run(['/usr/bin/i3-msg', '-t', 'get_tree'])
tree = json.loads(tree)
# import pprint
# pprint.pprint(tree)




# Find the currently focused container and it's parent
focused_parent = None
focused        = None
def find_focused(tree, parent):
	global focused, focused_parent
	if tree['focused']:
		focused_parent = parent
		focused        = tree
		return True
	for t in tree['nodes']:
		if find_focused(t, tree):
			return True
	return False
find_focused(tree, None)
# print("FOCUSED:", "%x" % focused['window'], focused['name'])



# Fold all containers of our parent into list
containers = []
containers.extend(focused_parent['nodes'])
containers.extend(focused_parent['floating_nodes'])
# print("LEN:", len(containers))




# Only one container: do nothing
if len(containers) == 1:
	print("NOP: only one container")
	sys.exit(0)




# Toggle between current and previous container
# (if we have marked a previous one and the previous one isn't the current one)
prev = None
for t in containers:
	m = t.get('marks', ())
	print("CONTAINER:", "%x" % t['window'], t['name'], m)
	if '_last' in m:
		prev = t
if prev and not prev is focused:
	print("PREV:", "%x" % prev['window'], prev['name'])
	focus(focused, prev)
	sys.exit(0)




# In all other cases: toggle between first two containers
if containers[0] is focused:
	focus(focused, containers[1])
else:
	focus(focused, containers[0])
